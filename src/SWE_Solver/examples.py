from .post_processing import plotSWE
import numpy as np
from scipy.special import erf
from math import sqrt

# Nx = 50
# tEnd = 0.1
# times = [0.0, 0.05, 0.1]

def exampleSWE(state='still_flat', method='C'):
    """
    Helper function to run pre-coded examples
    Input:
        state       The example to run
        method      The method used to run the example
    Output:
        h           The final water height profile
        u           The final water velocity profile
    """
    g = 1

    if state == "still_flat":
        Nx = 50
        B = lambda x: 1
        Bx = lambda x: 0
        h0 = [4.0 - B(_ / (Nx-1)) for _ in range(Nx)]
        u0 = [0.0 for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.5, 1.0]
    elif state == "still_tilted":
        Nx = 50
        B = lambda x: x
        Bx = lambda x: 1
        h0 = [4.0 - B(_ / (Nx-1)) for _ in range(Nx)]
        u0 = [0.0 for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.5, 1.0]
    elif state == "moving_flat":
        Nx = 50
        B = lambda x: 1
        Bx = lambda x: 0
        h0 = [4.0 - B(_ / (Nx-1)) for _ in range(Nx)]
        u0 = [1.0 for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.5, 1.0]
    elif state == "moving_tilted":
        Nx = 50
        B = lambda x: x
        Bx = lambda x: 1
        h0 = [4.0 - B(_ / (Nx-1)) for _ in range(Nx)]
        u0 = [1.0 for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.5, 1.0]
    elif state == "evolving_wave":
        Nx = 100
        B = lambda x: 1
        Bx = lambda x: 0
        Amin = 1
        Amax = 1 + sqrt(3)
        T0 = 0.5
        eps = 0.1
        f = lambda T: Amin + (Amax - Amin) / (1 - erf(-T0 / eps)) * (erf((T - T0) / eps) - erf (-T0 / eps))
        h0 = [f(_/ (Nx-1)) for _ in range(Nx)]
        u0 = [2.0 / h0[_] for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.1, 0.5, 1.0]
    elif state == "standing_wave":
        Nx = 100
        B = lambda x: 1
        Bx = lambda x: 0
        h0 = [1.0000000000023228, 1.0000000000023224, 1.0000000000023235, 1.0000000000023224, 1.0000000000023235, 1.0000000000023221, 1.0000000000023233, 1.0000000000023215, 1.0000000000023237, 1.0000000000023221, 1.0000000000023228, 1.000000000002323, 1.0000000000023228, 1.0000000000023235, 1.0000000000023228, 1.0000000000023241, 1.0000000000023233, 1.0000000000023253, 1.0000000000023253, 1.0000000000023292, 1.0000000000023304, 1.0000000000023388, 1.0000000000023423, 1.0000000000023639, 1.0000000000023703, 1.0000000000024156, 1.0000000000024223, 1.000000000002498, 1.0000000000025058, 1.000000000002606, 1.00000000000262, 1.000000000002744, 1.0000000000028646, 1.0000000000036178, 1.0000000000058942, 1.0000000000178964, 1.000000000067386, 1.0000000003062677, 1.0000000013598296, 1.0000000062985952, 1.000000028465813, 1.0000001312964808, 1.0000005958920684, 1.0000027401932519, 1.0000157198826476, 1.0000454904466385, 1.0001247604156562, 2.731528902919032, 2.731601067601587, 2.731650034099108, 2.731666647074794, 2.73166991871259, 2.7316706763596263, 2.731670566242251, 2.7316705335894147, 2.731670212075598, 2.7316702017564856, 2.7316699827783593, 2.7316700693210993, 2.731669975172893, 2.731670106142503, 2.731670100022602, 2.7316702281317156, 2.7316703030284457, 2.7316704352006322, 2.731670587042387, 2.7316707219817356, 2.7316709339516865, 2.731671069575952, 2.7316713255697938, 2.731671460940251, 2.731671746377446, 2.731671881464577, 2.7316721835794886, 2.731672318794107, 2.7316726275456995, 2.7316727632062565, 2.731673071642147, 2.731673207403172, 2.7316735112048853, 2.7316736460196256, 2.7316739426200236, 2.7316740755452886, 2.731674362898729, 2.7316744937732844, 2.731674769437767, 2.731674898819269, 2.7316751597712727, 2.731675288408896, 2.7316755314437136, 2.7316756599015424, 2.7316758823832856, 2.7316760109148968, 2.731676212185328, 2.731676340562789, 2.731676522184173, 2.731676650692771, 2.7316768322419147, 2.731676953168804, 2.731677045963039]
        u0 = [1.9999999999976823, 1.9999999999976827, 1.9999999999976814, 1.9999999999976827, 1.9999999999976814, 1.9999999999976832, 1.9999999999976823, 1.999999999997684, 1.999999999997681, 1.999999999997684, 1.9999999999976814, 1.9999999999976832, 1.999999999997681, 1.9999999999976823, 1.999999999997681, 1.999999999997681, 1.999999999997681, 1.999999999997681, 1.9999999999976792, 1.9999999999976774, 1.9999999999976743, 1.9999999999976676, 1.999999999997661, 1.9999999999976388, 1.999999999997633, 1.9999999999975855, 1.9999999999975797, 1.9999999999975024, 1.9999999999974998, 1.9999999999973959, 1.9999999999973883, 1.9999999999972613, 1.9999999999971476, 1.999999999996387, 1.9999999999941354, 1.9999999999821032, 1.9999999999325482, 1.9999999996943405, 1.9999999986373225, 1.9999999937127, 1.999999971494253, 1.9999998688342178, 1.999999403702391, 1.9999972609680583, 1.9999868019592946, 1.9999510334755681, 1.9998572781836024, 0.7322312544515429, 0.7321919941896469, 0.732167340917676, 0.7321564128839376, 0.7321546267998041, 0.7321543196008243, 0.7321545937426892, 0.7321546756935745, 0.7321551376537301, 0.7321552142491554, 0.7321556123669456, 0.7321556552060208, 0.7321559911119906, 0.7321560235520658, 0.7321563340706057, 0.7321563732999883, 0.7321566600134662, 0.7321567032561279, 0.7321569662869268, 0.7321570139370546, 0.7321572608666228, 0.7321573140047053, 0.7321575509670124, 0.7321576103383853, 0.7321578404486616, 0.7321579061227824, 0.7321581300407548, 0.7321582013833667, 0.7321584183757798, 0.7321584941951558, 0.7321587030175685, 0.732158781695864, 0.7321589812754935, 0.7321590610510176, 0.7321592509186454, 0.7321593304611266, 0.7321595105619471, 0.7321595893275104, 0.7321597594942745, 0.7321598375828549, 0.7321599971562343, 0.732160074901307, 0.7321602227484199, 0.7321603004331512, 0.7321604354070701, 0.7321605131584368, 0.7321606350888814, 0.7321607127565564, 0.7321608227021928, 0.7321609004527927, 0.732161010315315, 0.7321610834807661, 0.7321611396285493]
        tEnd = 0.1
        timePoints = [0.0, 0.1, 0.5, 1.0]
    elif state == "forming_collision":
        Nx = 100
        B = lambda x: 1
        Bx = lambda x: 0
        h0 = [2.0 for _ in range(Nx)]
        def u(x):
            if 0 <= x <= 0.3:
                return 1
            if 0.3 < x < 0.7:
                return 0
            if 0.7 <= x <= 1:
                return -1
        u0 = [u(_ / (Nx - 1)) for _ in range(Nx)]
        tEnd = 0.5
        timePoints = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]
    elif state == "spike_flattening":
        Nx = 100
        B = lambda x: 1
        Bx = lambda x: 0
        f = lambda x: np.exp(- (x - 0.5) ** 2 / (2 * 0.01))
        h0 = [2.0 + f(_ / (Nx - 1)) for _ in range(Nx)]
        u0 = [0 for _ in range(Nx)]
        tEnd = 1.0
        timePoints = [0.0, 0.1, 0.5, 1.0]
    elif state == "over_bump":
        Nx = 100
        def f(x):
            if x <= 0.5:
                return np.exp(- (x - 0.5) ** 2 / (2 * 0.01))
            else:
                return 1.5 - x
        B = lambda x: 0.2 + f(x)
        if method == 'A':
            raise ValueError('Example "over_bump" not implemented for method "A".')
        h0 = [4.0 - B(_ / (Nx - 1)) for _ in range(Nx)]
        u0 = [1 for _ in range(Nx)]
        tEnd = 0.6
        timePoints = [0.0, 0.2, 0.4, 0.6]
    elif state == "half_dry":
        Nx = 50
        B = lambda x: 1
        h0 = [4 if _ <= Nx / 2 else 0 for _ in range(Nx)]
        u0 = [0 for _ in range(Nx)]
        tEnd = 0.5
        timePoints = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]
    else:
        raise ValueError("Example state not implemented")

    if method in ['B', 'C']:
        return plotSWE(B, h0, u0, Nx, tEnd, timePoints, g, method)
    elif method == 'A':
        return plotSWE([B, Bx], h0, u0, Nx, tEnd, timePoints, g, method)
    else:
        raise ValueError("Method not implemented")